# SPDX-License-Identifier: GPL-2.0-or-later

#
# NXP (former Freescale) Kinetis Kx series devices
# Also used for Cortex-M4 equipped members of KVx and KE1xF series
#

source [find target/swj-dp.tcl]

if { [info exists CHIPNAME] } {
    set _CHIPNAME $CHIPNAME
} else {
    set _CHIPNAME kx
}

# Work-area is a space in RAM used for flash programming
# By default use 4kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x1000
}

if { [info exists CPUTAPID] } {
    set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
      set _CPUTAPID 0x4ba00477
   } {
      set _CPUTAPID 0x2ba01477
   }
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -dap $_CHIPNAME.dap

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

set _FLASHNAME $_CHIPNAME.pflash
flash bank $_FLASHNAME kinetis 0 0 0 0 $_TARGETNAME
kinetis create_banks

adapter speed 1000

reset_config srst_nogate

if {[using_hla]} {
   echo ""
   echo "!!!!!!!!!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!!!!!!!"
   echo " Kinetis MCUs have a MDM-AP dedicated mainly to MCU security related functions."
   echo " A high level adapter (like a ST-Link) you are currently using cannot access"
   echo " the MDM-AP, so commands like 'mdm mass_erase' are not available in your"
   echo " configuration. Also security locked state of the device will not be reported."
   echo " Expect problems connecting to a blank device without boot ROM."
   echo ""
   echo " Be very careful as you can lock the device though there is no way to unlock"
   echo " it without mass erase. Don't set write protection on the first block."
   echo "!!!!!!!!!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!!!!!!!"
   echo ""
} else {
   # Detect secured MCU or boot lock-up in RESET/WDOG loop
   $_TARGETNAME configure -event examine-fail {
      kinetis mdm check_security
   }
   # During RESET/WDOG loop the target is sometimes falsely examined
   $_TARGETNAME configure -event examine-end {
      kinetis mdm check_security
   }

   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
   cortex_m reset_config sysresetreq
}

# Disable watchdog not to disturb OpenOCD algorithms running on MCU
# (e.g. armv7m_checksum_memory() in verify_image)
# Flash driver also disables watchdog before FTFA flash programming.
$_TARGETNAME configure -event reset-init {
   kinetis disable_wdog
}
